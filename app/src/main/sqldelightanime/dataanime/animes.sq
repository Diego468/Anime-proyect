import java.lang.String;
import kotlin.collections.List;

CREATE TABLE animes(
    _id INTEGER NOT NULL PRIMARY KEY,
    source INTEGER NOT NULL,
    url TEXT NOT NULL,
    artist TEXT,
    author TEXT,
    description TEXT,
    genre TEXT AS List<String>,
    title TEXT NOT NULL,
    status INTEGER NOT NULL,
    thumbnail_url TEXT,
    favorite INTEGER AS Boolean NOT NULL,
    last_update INTEGER AS Long,
    next_update INTEGER AS Long,
    initialized INTEGER AS Boolean NOT NULL,
    viewer INTEGER NOT NULL,
    episode_flags INTEGER NOT NULL,
    cover_last_modified INTEGER AS Long NOT NULL,
    date_added INTEGER AS Long NOT NULL
);

CREATE INDEX animelib_favorite_index ON animes(favorite) WHERE favorite = 1;
CREATE INDEX animes_url_index ON animes(url);

insert:
INSERT INTO animes(source,url,artist,author,description,genre,title,status,thumbnail_url,favorite,last_update,next_update,initialized,viewer,episode_flags,cover_last_modified,date_added)
VALUES (:source,:url,:artist,:author,:description,:genre,:title,:status,:thumbnail_url,:favorite,:last_update,:next_update,:initialized,:viewer,:episode_flags,:cover_last_modified,:date_added);

getAnimeById:
SELECT *
FROM animes
WHERE _id = :id;

getAnimeByUrlAndSource:
SELECT *
FROM animes
WHERE url = :url AND source = :source;

getFavorites:
SELECT *
FROM animes
WHERE favorite = 1;

getAnimeSourceIdWithFavoriteCount:
SELECT
source,
count(*)
FROM animes
WHERE favorite = 1
GROUP BY source;

getFavoriteBySourceId:
SELECT *
FROM animes
WHERE favorite = 1
AND source = :sourceId;

getDuplicateLibraryAnime:
SELECT *
FROM animes
WHERE favorite = 1
AND LOWER(title) = :title
AND source != :source
LIMIT 1;

resetViewerFlags:
UPDATE animes
SET viewer = 0;

getSourceIdsWithNonLibraryAnime:
SELECT source, COUNT(*) AS anime_count
FROM animes
WHERE favorite = 0
GROUP BY source;

deleteAnimesNotInLibraryBySourceIds:
DELETE FROM animes
WHERE favorite = 0 AND source IN :sourceIds;

update:
UPDATE animes SET
    source = coalesce(:source, source),
    url = coalesce(:url, url),
    artist = coalesce(:artist, artist),
    author = coalesce(:author, author),
    description = coalesce(:description, description),
    genre = coalesce(:genre, genre),
    title = coalesce(:title, title),
    status = coalesce(:status, status),
    thumbnail_url = coalesce(:thumbnailUrl, thumbnail_url),
    favorite = coalesce(:favorite, favorite),
    last_update = coalesce(:lastUpdate, last_update),
    initialized = coalesce(:initialized, initialized),
    viewer = coalesce(:viewer, viewer),
    episode_flags = coalesce(:episodeFlags, episode_flags),
    cover_last_modified = coalesce(:coverLastModified, cover_last_modified),
    date_added = coalesce(:dateAdded, date_added)
WHERE _id = :animeId;

selectLastInsertedRowId:
SELECT last_insert_rowid();
